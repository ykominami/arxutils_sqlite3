#!/usr/bin/env ruby

require "arxutils_sqlite3"
require "simpleoptparse"
require "pp"
require "ykutils"
require "ykxutils"

if File.exist?(Arxutils_Sqlite3::DEST_OPTS_FILE)
  opts_file = File.join("./" , Arxutils_Sqlite3::DEST_OPTS_FILE_2.to_s)
  begin
    require opts_file
  rescue LoadError => ex
    pp ex.message
  end
end

begin
  require "dbrelation"
rescue LoadError => ex
  pp ex.message
end

# DBセットアップクラス
if File.exist?(Arxutils_Sqlite3::DEST_DBSETUP_FILE)
  dbsetup_file = File.join("./" , Arxutils_Sqlite3::DEST_DBSETUP_FILE_2.to_s)
  begin
    require dbsetup_file
  rescue LoadError => ex
    pp ex.message
  end
end


def prepare_for_migrate(env, db_scheme_ary, db_dir, dbconfig_dest_path, opts)
  migrate_base_dir = Arxutils_Sqlite3::Dbutil::MIGRATE_DIR
  # migrate用スクリプト格納ディレクトリへのパス
  migrate_dir = File.join(db_dir, migrate_base_dir)
  # DB構成ファイルの出力先ディレクトリ
  dest_config_dir = Arxutils_Sqlite3::Dbutil::CONFIG_DIR
  dbconfig_src_fname = "#{opts["dbconfig"]}.tmpl"
  p "dbconfig_dest_path=#{dbconfig_dest_path}"
  relation = opts[:relation]
  mig = Arxutils_Sqlite3::Migrate.new(
    dbconfig_dest_path,
    dbconfig_src_fname,
    migrate_dir,
    db_dir,
    db_scheme_ary,
    relation,
    opts)
end

def make_log_path(db_dir, dbconfig)
  log_path = ""
  log_fname = Arxutils_Sqlite3::Dbutil::Dbconnect.make_log_file_name(
    dbconfig, Arxutils_Sqlite3::Dbutil::DATABASELOG)
  if db_dir && log_fname
    # DB用ログファイルへのパス
    log_path = File.join(db_dir, log_fname)
  end
  log_path
end

def make_dbconfig_path(config_dir, dbconfig)
  File.join( config_dir, "#{dbconfig}.yml")
end

banner = "Usage: bundle exec ruby exe/makemigrate --cmd=(s|c|m|i|d) -y yaml_file --klass=class"

opts = @opts ? @opts : {}

opts["dbconfig"] = Arxutils_Sqlite3::Dbutil::DBCONFIG_SQLITE3

Simpleoptparse::Simpleoptparse.parse(ARGV, opts, banner, Arxutils_Sqlite3::VERSION, nil) do |parser|
  parser.on("--cmd X", %w[s c m i d]) { |x| opts["cmd"] = x }
  parser.on("-y yaml_file", "--yaml yaml_file") { |x| opts["yaml"] = x }
  parser.on("--klass klass") { |x| opts["klass"] = x }
end

env = ENV.fetch("ENV", nil)
env ||= "production"

case opts["cmd"]
when "s"
  FileUtils.cp(Arxutils_Sqlite3::DB_SCHEME_FILE, Arxutils_Sqlite3::Dbutil::CONFIG_DIR )
  if opts["klass"].nil? || opts["klass"].strip == ""
    puts banner
    exit 10
  end

  scope = Object.new
  hash = {klass: opts["klass"]}
  result_content = Ykutils::Erubyx.erubi_render_with_template_file(Arxutils_Sqlite3::OPTS_FILE, scope, hash)

  File.open(Arxutils_Sqlite3::DEST_OPTS_FILE, "w"){|file|
    file.write(result_content)
  }
  db_scheme_ary = nil

when "c"
  db_scheme_ary = nil
  db_dir = Arxutils_Sqlite3::Dbutil::DB_DIR
  config_dir = Arxutils_Sqlite3::Dbutil::CONFIG_DIR
  # DB構成ファイル名
  dbconfig_path = make_dbconfig_path(config_dir, opts["dbconfig"])

  mig = prepare_for_migrate(env, db_scheme_ary, db_dir, dbconfig_path, opts)
  mig.make_dbconfig(opts)

when "m"
  if opts["yaml"].nil? || opts["yaml"].strip == ""
    puts banner
    exit 20
  end

  opts["migrate_cmd"] = "migrate"
  db_scheme_ary = YAML.load_file( opts["yaml"] )

  scope = Object.new

  hash0 = {module_name: opts[:relation][:module].join("::")}
  hash = db_scheme_ary[0].merge( hash0 )
  result_content = Ykutils::Erubyx.erubi_render_with_template_file(Arxutils_Sqlite3::DBSETUP_FILE, scope, hash)

  File.open(Arxutils_Sqlite3::DEST_DBSETUP_FILE, "w"){|file|
    file.write(result_content)
  }
  db_dir = Arxutils_Sqlite3::Dbutil::DB_DIR

  config_dir = Arxutils_Sqlite3::Dbutil::CONFIG_DIR
  # DB構成ファイル名
  dbconfig_path = make_dbconfig_path(config_dir, opts["dbconfig"])
  # DBログファイルへのパス
  log_path = make_log_path(db_dir, opts["dbconfig"])
  mig = prepare_for_migrate(env, db_scheme_ary, db_dir, dbconfig_path, opts)
  mig.process
  dbconnect = Arxutils_Sqlite3::Dbutil::Dbconnect.new(
    dbconfig_path,
    env,
    log_path
  )
  connect_time = dbconnect.connect
  p "connect_time=#{connect_time}"
  ActiveRecord::MigrationContext.new(mig.migrate_dir, ActiveRecord::SchemaMigration).up

when "i"
  #db_scheme_ary = YAML.load_file( opts["yaml"] )
  db_scheme_ary = nil
  db_dir = Arxutils_Sqlite3::Dbutil::DB_DIR

  config_dir = Arxutils_Sqlite3::Dbutil::CONFIG_DIR
  # DB構成ファイルへのパス
  dbconfig_dest_path = make_dbconfig_path(config_dir, opts["dbconfig"])
  # DBログファイルへのパス
  log_path = make_log_path(db_dir, opts["dbconfig"])
  dbconnect = Arxutils_Sqlite3::Dbutil::Dbconnect.new(
    dbconfig_dest_path,
    env,
    log_path
  )
  connect_time = dbconnect.connect

  Dbsetup.new(connect_time)

when "d"
  db_scheme_ary = nil
  mig = repare_for_migrate(env, db_scheme_ary, opts)
  mig.delete_migrate_config_and_db

else
  puts "Invalid command(#{opts["cmd"]}) specified!!"
end

#

