#!/usr/bin/env ruby

require "arxutils_sqlite3"
require "simpleoptparse"
#require "erb"
require "pp"
require "ykutils"

#opts_file = "./opts.rb"
opts_file = "./" + Arxutils_Sqlite3::DEST_OPTS_FILE_2.to_s
begin
  require opts_file
rescue LoadError => ex
end
  # DBセットアップクラス
class Dbsetup
  def self.init(hash, opts)
    register_time = Arxutils_Sqlite3::Dbutil::DbMgr.init(
      hash["db_dir"],
      hash["migrate_dir"],
      hash["config_dir"],
      hash["dbconfig"],
      hash["env"],
      hash["log_fname"],
      opts
    )

    # 保存用DBマネージャ
    # @dbmgr = Dbutil::EnopMgr.new(register_time)
    # puts "@dbmgr=#{@dbmgr}"
    register_time
  end
end

def migrate(env, db_scheme_ary, opts)
  Arxutils_Sqlite3::Migrate.migrate(
    Arxutils_Sqlite3::Dbutil::DB_DIR,
    Arxutils_Sqlite3::Dbutil::CONFIG_DIR,
    Arxutils_Sqlite3::Dbutil::DATABASELOG,
    Arxutils_Sqlite3::Dbutil::MIGRATE_DIR,
    env,
    db_scheme_ary,
    opts["dbconfig"],
    opts
  )
end

hash = {
  "db_dir" => Arxutils_Sqlite3::Dbutil::DB_DIR,
  "migrate_dir" => Arxutils_Sqlite3::Dbutil::MIGRATE_DIR,
  "config_dir" => Arxutils_Sqlite3::Dbutil::CONFIG_DIR,
  "log_fname" => Arxutils_Sqlite3::Dbutil::DATABASELOG,
}


banner = "Usage: bundle exec ruby exe/makemigrate --cmd=(s|c|m|i|r) -s yaml_file --klass=class"

opts = @opts ? @opts : {}

opts["dbconfig"] = Arxutils_Sqlite3::Dbutil::DBCONFIG_SQLITE3

Simpleoptparse::Simpleoptparse.parse(ARGV, opts, banner, Arxutils_Sqlite3::VERSION, nil) do |parser|
  parser.on("--cmd X", %w[s c m i r]) { |x| opts["cmd"] = x }
  parser.on("-y yaml_file", "--yaml yaml_file") { |x| opts["yaml"] = x }
  parser.on("--klass klass") { |x| opts["klass"] = x }
end

hash["dbconfig"] = opts["dbconfig"]

env = ENV.fetch("ENV", nil)
env ||= "production"

hash["env"] = env

case opts["cmd"]
when "s"
  FileUtils.cp(Arxutils_Sqlite3::DB_SCHEME_FILE, Arxutils_Sqlite3::CONFIG_DIR )
  if opts["klass"].nil? || opts["klass"].strip == ""
    puts banner
    exit 10
  end

  scope = Object.new
  hash = {klass: opts["klass"]}
  result_content = Ykutils::Erubyx.erubi_render_with_template_file(Arxutils_Sqlite3::OPTS_FILE, scope, hash)

  File.open(Arxutils_Sqlite3::DEST_OPTS_FILE, "w"){|file|
    file.write(result_content)
  }
  db_scheme_ary = nil

when "c"
  opts["migrate_cmd"] = "makeconfig"
  #opts["remigrate"] = false
  db_scheme_ary = nil

  migrate(env, db_scheme_ary, opts)
when "m"
  if opts["yaml"].nil? || opts["yaml"].strip == ""
    puts banner
    exit 20
  end

  opts["migrate_cmd"] = "migrate"
  db_scheme_ary = YAML.load_file( opts["yaml"] )

  p "cmd=m"
  migrate(env, db_scheme_ary, opts)
when "i"
  register_time = Dbsetup.init(
    hash,
    opts
  )
when "r"
  #opts["makeconfig"] = false
  opts["migrate_cmd"] = "remigrate"

  db_scheme_yaml_file = opts["yaml"]
  if db_scheme_yaml_file.nil?
    puts banner
    exit 10
  end
  db_scheme_ary = YAML.load_file(db_scheme_yaml_file)
  migrate(env, db_scheme_ary, opts)

  #p register_time
else
  raise
end
